import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders
from utils.logger import get_logger
import os

logger = get_logger(__name__)

class EmailAlert:
    def __init__(self, email_config):
        self.smtp_server = email_config['smtp_server']
        self.smtp_port = email_config['smtp_port']
        self.sender = email_config['sender']
        self.receiver = email_config['receiver']
        self.username = email_config['username']
        self.password = email_config['password']

    def send_custom_email(self, subject, html_content, attachment=None):
        """Send an email with custom HTML content and optional attachment."""
        msg = MIMEMultipart()
        msg['From'] = self.sender
        msg['To'] = self.receiver
        msg['Subject'] = subject

        msg.attach(MIMEText(html_content, 'html'))

        # Attach file if provided
        if attachment and os.path.exists(attachment):
            part = MIMEBase('application', 'octet-stream')
            with open(attachment, 'rb') as file:
                part.set_payload(file.read())
            encoders.encode_base64(part)
            part.add_header('Content-Disposition', f'attachment; filename="{os.path.basename(attachment)}"')
            msg.attach(part)

        try:
            with smtplib.SMTP(self.smtp_server, self.smtp_port) as server:
                server.starttls()
                server.login(self.username, self.password)
                server.sendmail(self.sender, self.receiver, msg.as_string())
            logger.info(f"Email sent: {subject}")
        except Exception as e:
            logger.error(f"Failed to send email: {e}")

    def send_alert_table(self, alerts, attachment=None):
        """Send a single consolidated alert email with all problematic devices."""
        if not alerts:
            logger.info("No alerts to send.")
            return

        subject = f"Network Alert: {len(alerts)} Issues Detected"
        email_body = """
        <h2>⚠ Network Alerts Detected</h2>
        <p>The following devices reported issues:</p>
        <table border="1" cellpadding="8" style="border-collapse: collapse; font-family: Arial;">
            <thead style="background-color:#333;color:#fff;">
                <tr>
                    <th>IP</th>
                    <th>Hostname</th>
                    <th>Status</th>
                    <th>Latency (ms)</th>
                    <th>MAC</th>
                    <th>Vendor</th>
                    <th>Open Ports</th>
                </tr>
            </thead>
            <tbody>
        """

        for d in alerts:
            color = "red" if d['status'] == 'Unreachable' else "orange"
            email_body += f"""
            <tr>
                <td>{d['ip']}</td>
                <td>{d.get('hostname', 'Unknown')}</td>
                <td style="color:{color}; font-weight:bold;">{d['status']}</td>
                <td>{d['latency'] if d['latency'] else 'N/A'}</td>
                <td>{d['mac']}</td>
                <td>{d['vendor']}</td>
                <td>{", ".join(map(str, d['open_ports'])) if d['open_ports'] else 'None'}</td>
            </tr>
            """

        email_body += "</tbody></table>"

        # Add a quick note
        email_body += "<p><i>Generated by Skynet © 2025 Hein+Fricke. All Rights Reserved.</i></p>"

        # Send email using custom method
        self.send_custom_email(subject, email_body, attachment)