import os
from datetime import datetime

class HTMLReporter:
    def __init__(self):
        os.makedirs("reports", exist_ok=True)

    def generate(self, results, log_file=None):
        scan_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        filename = f"reports/report_{datetime.now().strftime('%Y-%m-%d_%H-%M-%S')}.html"

        # Calculate summary stats
        reachable = [r for r in results if r["status"] == "Reachable"]
        unreachable = [r for r in results if r["status"] == "Unreachable"]
        avg_latency = (
            round(sum([r["latency"] for r in reachable if r["latency"]]) / len(reachable), 2)
            if reachable else 0
        )

        log_link = f"<a href='../{log_file}' target='_blank'>View Log File</a>" if log_file else "Not Available"

        with open(filename, "w", encoding="utf-8") as f:
            f.write(f"""<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>Network Scan Report</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {{ background-color: #f9f9f9; font-family: Arial; }}
        .status-reachable {{ color: green; font-weight: bold; }}
        .status-unreachable {{ color: red; font-weight: bold; }}
        .latency-high {{ color: orange; font-weight: bold; }}
        .summary-box {{ background-color: #fff; border: 1px solid #ddd; padding: 20px; border-radius: 8px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); }}
        .report-header h1 {{ font-size: 28px; margin-bottom: 15px; }}
        .table-container {{ margin-top: 25px; }}
    </style>
</head>
<body class="p-4">
    <div class="report-header mb-4">
        <h1>ðŸ“¡ H+F Skynet Network Scan Report</h1>
    </div>

    <div class="summary-box mb-4">
        <p><strong>Scan Date:</strong> {scan_time}</p>
        <p><strong>Total Devices:</strong> {len(results)}</p>
        <p><strong>Reachable:</strong> {len(reachable)}</p>
        <p><strong>Unreachable:</strong> {len(unreachable)}</p>
        <p><strong>Average Latency:</strong> {avg_latency} ms</p>
        <p><strong>Log File:</strong> {log_link}</p>
    </div>

    <div class="table-container">
        <table class="table table-striped table-bordered align-middle">
            <thead class="table-dark">
                <tr>
                    <th>#</th>
                    <th>IP Address</th>
                    <th>MAC Address</th>
                    <th>MAC Vendor</th>
                    <th>Hostname</th>
                    <th>Status</th>
                    <th>Latency (ms)</th>
                    <th>Open Ports</th>
                </tr>
            </thead>
            <tbody>
""")
            for idx, device in enumerate(results, start=1):
                status_class = "status-reachable" if device["status"] == "Reachable" else "status-unreachable"
                latency_class = "latency-high" if device["latency"] and device["latency"] > 200 else ""
                open_ports = ", ".join(map(str, device["open_ports"])) if device["open_ports"] else "None"

                f.write(f"""
                <tr>
                    <td>{idx}</td>
                    <td>{device['ip']}</td>
                    <td>{device.get('mac', 'Unknown')}</td>
                    <td>{device.get('vendor', 'Unknown')}</td>
                    <td>{device.get('hostname', 'Unknown')}</td>
                    <td class="{status_class}">{device['status']}</td>
                    <td class="{latency_class}">{device['latency'] if device['latency'] is not None else 'N/A'}</td>
                    <td>{open_ports}</td>
                </tr>
                """)

            f.write("""
            </tbody>
        </table>
    </div>
    <footer class="mt-5">
        <p class="text-muted small">Generated by Skynet Â© 2025 Hein+Fricke. All Rights Reserved.</p>
    </footer>
</body>
</html>
""")
        return filename